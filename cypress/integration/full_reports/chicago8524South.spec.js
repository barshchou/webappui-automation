const testData = require("../../fixtures/full_reports/chicago8524South.fixtures.json");
import homepageActions from "../../actions/base/homepage.actions";
import keyInfoActions from "../../actions/report/keyInfo.actions";
import navSectionActions from "../../actions/base/navigationSection.actions";
import clientActions from "../../actions/report/client.actions";
import summaryActions from "../../actions/property/summary.actions";
import marketActions from "../../actions/property/market.actions";
import propertyHistoryActions from "../../actions/property/history.actions";
import descriptionActions from "../../actions/property/description.actions";
import siteDescriptionActions from "../../actions/property/siteDescription.actions";
import propertyMapsActions from "../../actions/property/maps.actions";

describe("Full doesn't Freddie Mac, only residential, multifamily report ", () => {
   it("Test", () => {
      cy.loginByApi();
      homepageActions.createReportAdvancedSearch(testData.state, testData.address, testData.propIdentifierType,
          testData.identifier, testData.reportNumber, testData.templateType, testData.incomeType, testData.conclusionType);
      keyInfoActions.choosePurpose(testData.purposeValue);
      keyInfoActions.checkAllInterestAppraisedByValues(testData.interestAppraised);
      keyInfoActions.enterDateByType(testData.dueDate, testData.dueType);
      keyInfoActions.enterDateByType(testData.dateOfValuation, testData.valuationType);
      keyInfoActions.uploadFile(testData.engagementFileName);
      navSectionActions.openClientPageInReport();
      clientActions.enterClientName(testData.clientName);
      navSectionActions.navigateToPropertySummary();
      summaryActions.verifySiteDetails(testData.streetAddressToBe, testData.censusTract, testData.streetNameToBe,
          testData.buildingDescriptor, testData.propIdentifierType, testData.identifier);
      summaryActions.enterYearBuilt(testData.yearBuilt);
      summaryActions.enterSiteArea(testData.siteArea);
      summaryActions.fillAsCompleteBuildingDescription(testData.grossArea, testData.numberOfUnits, testData.floorsNumber);
      summaryActions.clickWalkUpTypeButtons();
      summaryActions.fillCurrentBuildDescription(testData.grossArea, testData.numberOfUnits, testData.floorsNumber);
      summaryActions.editAsCompleteExport(testData.asCompleteExportText);
      navSectionActions.openMarketPageInProperty();
      marketActions.verifyTimeOnMarket(testData.minExposureMonths, testData.maxExposureMonths);
      marketActions.fillMarketResearch(testData);
      marketActions.clickPullFromDropbox();
      marketActions.verifyAnyDocumentInputIsNotEmpty();
      navSectionActions.openPropertyHistoryInProperty();
      propertyHistoryActions.enterCurrentOwner(testData.currentOwner);
      propertyHistoryActions.checkIsUnderContractCheckbox();
      propertyHistoryActions.enterContractDetails(testData.buyer, testData.contractDate, testData.contractPrice);
      navSectionActions.openDescriptionInProperty();
      descriptionActions.selectGeneralPropertyCondition(testData.generalPropertyCondition);
      descriptionActions.selectAsStabilizedPropertyCondition(testData.stabilizedCondition);
      descriptionActions.checkListCheckboxesByLabels(testData.locationsInspectedLabels);
      descriptionActions.checkStairConditionByValue(testData.stairCondition);
      descriptionActions.checkFoundationByValue(testData.foundationValue);
      descriptionActions.checkStructuralSystemByValue(testData.structuralSystemValue);
      descriptionActions.checkListCheckboxesByLabels(testData.externalWallsLabels);
      descriptionActions.checkFramingByValue(testData.framingValue);
      descriptionActions.checkRoofTypeByValue(testData.roofType);
      descriptionActions.checkListCheckboxesByLabels(testData.windowsLabels);
      descriptionActions.checkListCheckboxesByLabels(testData.plumbingLabels);
      descriptionActions.checkSprinklersByValue(testData.sprinklersValue);
      descriptionActions.checkListCheckboxesByLabels(testData.securityLabels);
      descriptionActions.checkContainsBasement();
      descriptionActions.checkListCheckboxesByLabels(testData.basementAccess);
      descriptionActions.checkBasementStateByValue(testData.basementState);
      descriptionActions.verifyTotalEconomicLife(testData.totalEconomicLifeToBe);
      descriptionActions.enterAgeEffective(testData.ageEffective);
      navSectionActions.openSiteDescriptionInProperty();
      siteDescriptionActions.editTransportationDiscussionCommentary(testData.transportationCommentary);
      siteDescriptionActions.checkSurroundingResidental();
      siteDescriptionActions.verifySiteArea(testData.siteArea);
      siteDescriptionActions.verifyPropertyShape(testData.propertyShape);
      navSectionActions.openMapsInProperty();
      propertyMapsActions.enterPropertyFrontage(testData.propertyFrontage);
      navSectionActions.openSiteDescriptionInProperty();
      siteDescriptionActions.verifyPropertyFrontage(testData.propertyFrontage);
      siteDescriptionActions.verifySiteDescriptionItems(testData.siteDescriptionItems);
      siteDescriptionActions.editFloodHazardCommentary(testData.floodHazardCommentary);
      siteDescriptionActions.verifyUtilitiesItems(testData.utilitiesItems);
      siteDescriptionActions.verifyUtilitiesDescriptions(testData.utilitiesDescription);
   });
});